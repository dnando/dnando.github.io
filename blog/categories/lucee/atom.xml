<?xml version="1.0" encoding="utf-8"?>
<feed xmlns="http://www.w3.org/2005/Atom">

  <title><![CDATA[Category: Lucee | Nando @ Aria Media]]></title>
  <link href="http://dnando.github.io/blog/categories/lucee/atom.xml" rel="self"/>
  <link href="http://dnando.github.io/"/>
  <updated>2017-04-09T02:02:31+02:00</updated>
  <id>http://dnando.github.io/</id>
  <author>
    <name><![CDATA[Nando @ Aria Media]]></name>
    
  </author>
  <generator uri="http://octopress.org/">Octopress</generator>

  
  <entry>
    <title type="html"><![CDATA[Cfqueryparam Setting for SQL 'in' Statements]]></title>
    <link href="http://dnando.github.io/blog/2017/04/09/cfqueryparam-setting-for-sql-in-statements/"/>
    <updated>2017-04-09T01:32:33+02:00</updated>
    <id>http://dnando.github.io/blog/2017/04/09/cfqueryparam-setting-for-sql-in-statements</id>
    <content type="html"><![CDATA[<p>When using an SQL IN statement within a ColdFusion query, it is necessary to add the attribute <code>list="true"</code> to the param used for the list. See the example below that selects all employees that have a birthdate in March, April or May.</p>

<pre><code>    var params = {};
    var monthList = "3,4,5";
    params.insert( "monthList", { value: ml, cfsqltype="CF_SQL_INTEGER", list="true" } );
    var sql = "
        select employeeId, firstName, lastName, birthdate
        from Employee
        where month( birthdate ) in ( :monthList )
    ";
    var q = queryExecute( sql, params );
</code></pre>

<p>Thanks to Ben Nadel&rsquo;s post <a href="https://www.bennadel.com/blog/425-coldfusion-cfqueryparam-list-attribute-is-sweeet.htm">here</a> for this crucial tidbit of information!</p>
]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[Scale Attribute Is Essential With Decimal Cfsqltype]]></title>
    <link href="http://dnando.github.io/blog/2016/08/05/scale-attribute-is-essential-with-decimal-cfsqltype/"/>
    <updated>2016-08-05T00:22:47+02:00</updated>
    <id>http://dnando.github.io/blog/2016/08/05/scale-attribute-is-essential-with-decimal-cfsqltype</id>
    <content type="html"><![CDATA[<p>I just ran across something important to know regarding the cfsqltype cf_sql_decimal. Here&rsquo;s the code I was testing:</p>

<pre><code>params.insert( 'previousNumericDuration',
    { value: preNDuration, cfsqltype: 'cf_sql_decimal' } );
</code></pre>

<p>Here&rsquo;s what it would look like if you are using the cfqueryparam tag:</p>

<pre><code>&lt;cfqueryparam value='#preNDuration#' cfsqltype='cf_sql_decimal' /&gt;
</code></pre>

<p>The database column this is persisted to is defined as a <code>decimal(4,2)</code>, so 2 digits are reserved for the whole number portion of the value and 2 digits reserved for the decimal portion of the value. Logging showed values being calculated such as 4.25 and 4.5, but these were being persisted to the database rounded to the nearest integer, but with 2 decimal places none the less, so 4.25 was persisted as <em>4.00</em> and 4.5 was persisted as <em>5.00</em>. Definitely not what I wanted. What&rsquo;s the point of a decimal datatype if the decimal portion is always 0?</p>

<p>Digging into the documentation for cfqueryparam I found a scale attribute that until today I hadn&rsquo;t realized was absolutely essential to use for decimal fields like this. Scale defines the &hellip; &ldquo;Number of decimal places in parameter. Applies to CF_SQL_NUMERIC and CF_SQL_DECIMAL.&rdquo; Its default is 0, so my values were being rounded to 0 decimal places. After changing my code to the following:
<code>
params.insert( 'previousNumericDuration',
    { value: preNDuration, cfsqltype: 'cf_sql_decimal', scale: 2 } );
</code>
the decimal portion of the values was then persisted correctly.</p>

<p>So the <em>scale</em> attribute is absolutely essential for a <em>decimal</em> cfsqltype. I might have tripped over this before, I&rsquo;m not sure. Perhaps this blog post will help me remember it next time. Now I should search my code to see if I&rsquo;ve neglected this attribute elsewhere!</p>
]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[Generating Accurate PDFs Using Cfdocument]]></title>
    <link href="http://dnando.github.io/blog/2015/07/01/generating-accurate-pdfs-using-cfdocument/"/>
    <updated>2015-07-01T23:55:41+02:00</updated>
    <id>http://dnando.github.io/blog/2015/07/01/generating-accurate-pdfs-using-cfdocument</id>
    <content type="html"><![CDATA[<p>I&rsquo;ve been developing a PDF, generated within a CFML application, that needs very accurate placement of chunks of text so that it can be printed on a standard form. It also needs to use a specified font, OCR-B, so that a line of text on the printed form can be machine scanned. I&rsquo;ve managed to get this working much better than expected on both ACF and Lucee, in a cross-compatible way, so I thought I&rsquo;d write everything up to remember the details down the line.</p>

<p>I was at first thinking I might be able to use the new cfhtmltopdf tag, but quickly dropped that idea: I couldn&rsquo;t get the PDF Service needed to use this tag to work on my Mac; it seems to be an enterprise only feature; and I wasn&rsquo;t so sure this approach would be compatible to use within Lucee. After looking around over the fence for a bit at potential solutions outside of CFML, nothing hit me as particularly appealing, so I dug into getting cfdocument to work as best I could. First the tag attributes.</p>

<h2>Attributes</h2>

<pre><code>&lt;cfdocument format="pdf" pagetype="A4" orientation="portrait" fontEmbed="true" unit="cm" localUrl="true" saveAsName="#pdfFileName#" marginLeft="0" margintop="0" marginright="0" marginbottom="0"&gt;
</code></pre>

<p>FontEmbed=&ldquo;true&rdquo; is essential so that anyone can print the PDF with the OCR-B code line correctly displayed, even if they don&rsquo;t have this font on their system. LocalUrl is set to true to easily pull in a logo image from the local file system. Note the margins are set to 0, because I&rsquo;m using a <code>&lt;div&gt;</code> tag to define the size of the page to control the tendency of the 2 different PDF generation engines used in ACF and Lucee to scale the layout, differently.</p>

<h2>Layout</h2>

<p>Nested directly within the cfdocument tag is a div tag that sets the page width, with <code>position:relative</code> so it remains within the page flow, and acts as the parent tag within which all layout divs that position text are nested <em>and proportionally scaled against</em>:</p>

<p>&#8220;`</p>

<p><div style="position:relative; top:0mm; left:0mm; width:210mm;">
&#8220;`
Then within that parent div tag are nested the various div tags, absolutely positioned, containing the blocks of text and images that make up the PDF content. Here are a few examples to demonstrate:</p>

<pre><code>    &lt;div class="address"  style="position:absolute; top:13mm; left:100mm; "&gt;
        #biller.address1# &amp;middot #biller.zipcode# #biller.city#
    &lt;/div&gt;
    &lt;!--- client address ---&gt;
    &lt;div class="text" style="position:absolute; top:45mm; left:130mm"&gt;
        #invoice.getClient().getName()#&lt;br&gt;
        &lt;cfif len( trim( invoice.getClient().getAddress1() ) )&gt;#invoice.getClient().getAddress1()#&lt;br&gt;&lt;/cfif&gt;
        &lt;cfif len( trim( invoice.getClient().getAddress2() ) )&gt;#invoice.getClient().getAddress2()#&lt;br&gt;&lt;/cfif&gt;
        &lt;cfif len( trim( invoice.getClient().getAddress3() ) )&gt;#invoice.getClient().getAddress3()#&lt;br&gt;&lt;/cfif&gt;
        #invoice.getClient().getCountryCode()#-#invoice.getClient().getZipCode()# #invoice.getClient().getCity()#
    &lt;/div&gt;
</code></pre>

<p>What I really like about this approach is that each of the text blocks winds up very close to the top and left dimensions specified, and the ACF and Lucee outputs are nearly identical.</p>

<p>Without the parent div tag specifying the width, the results between the 2 engines are vastly different, and positioning the elements is much more a question of trial and error than simply entering the top and left positions as measured with a ruler (and perhaps tweaking them by a few milimeters if necessary). Also without the parent div tag to control how layout elements scale, changing the dimension of one absolutely positioned div within the PDF can easily alter the position or size of other divs, which can be very frustrating if you have 20 or 30 elements that all need to be precisely positioned.</p>

<p>Feel free to experiment with paddings or margins on the parent div if you want - I suspect it would work just as well (but haven&rsquo;t tried). For myself, I found it easier simply to measure placement from the edge of the page.</p>

<p>I haven&rsquo;t tried this myself, yet, but I have it from a reliable source that a parent div tag in the layout specifying the page width, as above, will fix page break issues if a table extends over more than one page.</p>

<h2>Fonts</h2>

<p>Specifying a font for a block of text is simple. You can use a CSS style declaration within a style block that is nested <em>within</em> the cfdocument tag, or you can place the font specification directly in a style attribute of an html tag like `<div> <span> <td>. Here are the styles I used for the above text blocks (and again, the style block must be nested within the cfdocument tag, or the PDF generator won&rsquo;t see it):</p>

<pre><code>&lt;cfdocument format="pdf" pagetype="A4" orientation="portrait" fontEmbed="true" unit="cm" localUrl="true" saveAsName="#pdfFileName#" marginLeft="0" margintop="0" marginright="0" marginbottom="0"&gt;
&lt;style&gt;
    div.text {
        font: 9pt Arial;
        line-height: 13pt;
    }

    div.address {
        font: 9pt Arial;
        color: #033B7D;
    }
    ...
&lt;/style&gt;
</code></pre>

<p>As of this writing, available CSS attributes remain limited. There is a list of CSS attributes that work in the ACF documentation for cfdocument, reproduced here:</p>

<pre><code>The cfdocument tag supports the following CSS styles:

background
background-attachment
background-color
background-image
background-position
background-repeat
border
border-bottom
border-bottom-color
border-bottom-style (solid border only)
border-bottom-width
border-color
border-left
border-left-color
border-left-style (solid border only)
border-left-width
border-right
border-right-color
border-right-style (solid border only)
border-right-width
border-spacing
border-style (solid border only)
border-top
border-top-color
border-top-style (solid border only)
border-top-width
border-width
bottom
clear
clip
color
content (strings, counters only)
counter-increment
counter-reset
cursor
display
float
font
font-family
font-size
font-style
font-weight
height
left
letter-spacing
line-height
list-style-type
margin
margin-bottom
margin-left
margin-right
margin-top
outline
outline-color
outline-style (solid, dotted, dashed only)
outline-width
padding
padding-bottom
padding-left
padding-right
padding-top
page-break-after
page-break-before
page-break-inside
position
right
text-align (left, right, and center)
text-decoration
text-indent
top
unicode-bidi
vertical-align
visibility
white space (normal, nowrap only)
width
z-index
</code></pre>

<h2>Custom fonts</h2>

<p>Scattered around the internet I found a variety of comments suggesting that getting a &ldquo;custom&rdquo; font to work within cfdocument isn&rsquo;t at all easy. Once you know how, it&rsquo;s actually fairly simple. For both ACF and Lucee, it&rsquo;s a question of getting the correct font file in the right place, with the right permissions, and restarting ACF/Lucee.</p>

<p>For ACF, log into the administrator and go to the Font Management Panel. There you will see all the fonts available to use in cfdocument &hellip; except that as of this writing, the OTF fonts won&rsquo;t work, even tho&#8217; the Font Management panel claims they are useable in PDFs. Unless something changes in the future, forget OTF fonts for cfdocument. I tried a bunch that already seemed to be recognized, none worked.</p>

<p>At the top of the font panel, you&rsquo;ll see a feature that allows you to add fonts &ldquo;Register New Font(s) with ColdFusion&rdquo;. I couldn&rsquo;t get this to work reliably - I think the validation routine on it isn&rsquo;t well designed. Go ahead and try if you like, but I found it easier to simply find a path to a font directory already recognized by ACF from the list of fonts installed ( I chose a directory with TTF files, just to be sure ), copy the TTF font files you want to use to that directory, change the owner/group and permissions to match the other font files in that directory (if necessary on your OS), restart ACF, log back into the administrator, go to the Font Management panel again and look for your fonts. In the left columns of the font table there are 3 names, Font Family, Font Face, Postscript Name. From my experience, using the font face name in your CSS specification should work. ( If not, try the other names - I saw a post suggesting that. )</p>

<p>To be clear, after you get the font installed in a directory that ACF recognizes as a font directory, one way or another, you&rsquo;ll need to find the name you need to use in your CSS. The file name often does not match the font name.</p>

<p>For Lucee, the process is different. ;-) Go to your Lucee installation directory, and within the /lib/ directory underneath it, find the fonts.jar file. Copy it to a working directory, rename the copy to fonts.zip and unzip it. ( A .jar file is essentially a ZIP file ). In the unzipped <em>fonts</em> directory that results, add your custom font files, again use only TTFs, and then open the pd4fonts.properties file you find in there and following the pattern you see, add the names of the fonts. In Lucee, you can choose the name, but to be cross compatible with ACF, I used the same name that ACF picked up from the font file. Here&rsquo;s what my pd4fonts.properties looked like after I added the OCR-B font I needed:</p>

<pre><code>#this is an autogenerated file. please remove manually any references to copyrighted fonts
#Fri Apr 17 20:00:52 CEST 2009
Arial=arial.ttf
Arial\ Bold=arialbd.ttf
Arial\ Bold\ Italic=arialbi.ttf
Arial\ Italic=ariali.ttf
Courier\ New=cour.ttf
Courier\ New\ Bold=courbd.ttf
Courier\ New\ Bold\ Italic=courbi.ttf
Courier\ New\ Italic=couri.ttf
Times\ New\ Roman=times.ttf
Times\ New\ Roman\ Bold=timesbd.ttf
Times\ New\ Roman\ Bold\ Italic=timesbi.ttf
Times\ New\ Roman\ Italic=timesi.ttf
OCRB=ob______.ttf
</code></pre>

<p>I added the last line, <code>OCRB=ob______.ttf</code>, following the pattern <code>FontFaceName=fontFileName.ttf</code>.</p>

<p>Note that spaces in the font name are escaped with backslashes, so those look like this <code>Font\ Face\ Name=fontFileName.ttf</code>.</p>

<p>Ok, save pd4fonts.properties when you&rsquo;re done, zip the fonts directory up into fonts.zip, rename it to fonts.jar, copy it back where it came from in the /lib/ directory, overwriting &hellip; no wait! Don&rsquo;t just overwrite the old fonts.jar. Keep a copy of it, just in case &hellip; replace the old fonts.jar with the new fonts.jar, change the owner/group permissions to match the old file, and then restart Lucee.</p>

<p>The name to use in your CSS for the font is the name you placed in the pd4fonts.properties file.</p>

<p>Of course, the above approach for Lucee ( 4.5 ) might certainly change in the future. But for now, it works like this.</p>

<p>A big thanks to <a href="http://blog.hnat.de/post.cfm/schriftarten-zu-railo-hinzufugen">Michael Hnat</a> for pointing me in the right direction regarding Lucee with his very helpful blog post.</p>

<h2>Images</h2>

<p>There is a logo image at the top of this PDF that was scaling up when rendered in Lucee in a way that caused it to be misplaced. The top left position was correct, but it was about 50% too big, pixelated, and overran other text. After a bunch of reading that indicated modifying the image print size or resolution would not help, I tried adding a css style declaration to the image that specified a size in mm, and it worked! Thanks to faxi05 for the suggestion.</p>

<pre><code>&lt;img src="logos/imageName.png" style="width:78mm; height:14mm" /&gt;
</code></pre>

<p>&hellip; and it&rsquo;s cross compatible with ACF!</p>
]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[CFML Queries in Script]]></title>
    <link href="http://dnando.github.io/blog/2015/06/16/cfml-queries-in-script/"/>
    <updated>2015-06-16T18:39:54+02:00</updated>
    <id>http://dnando.github.io/blog/2015/06/16/cfml-queries-in-script</id>
    <content type="html"><![CDATA[<p>Recently, I needed to write a somewhat complex query with a conditional where clause. I resisted the urge to revert to the cfquery tag for this sort of thing, and came up with the following using queryExecute(), submitted as an example without explanation. This approach works on both ACF and Lucee.</p>

<pre><code>public query function findRawAudit( string entity, numeric userId, date dateFrom, date dateTo, numeric timeZoneOffset ) {
    var newLine = CHR(13) &amp; CHR(10);
    var params = {};
    var sql = "
        select a.entity, a.entityId, a.timestamp, a.transaction, a.attribute, a.value as previousValue, u.name as username, null as currentValue, null as auditName, null as asql
        from Audit a inner join User u
        on a.userId = u.userId
        where 0=0
    ";

    if ( structKeyExists(arguments, 'entity') and len( arguments.entity ) ) {
        sql &amp;= newLine &amp; "and entity = :entity";
        structInsert(params, "entity", { value: arguments.entity, cfsqltype: "cf_sql_varchar" } );
    }

    if ( structKeyExists(arguments, 'userId') ) {
        sql &amp;= newLine &amp; "and a.userId = :userId";
        structInsert(params, "userId", { value: arguments.userId, cfsqltype: "cf_sql_integer" } );
    }

    if ( structKeyExists(arguments, 'dateFrom') ) {
        sql &amp;= newLine &amp; "and timestamp &gt; :dateFrom";
        //  adjust dateFrom to account for time zone difference between server and user
        var dateFromUTC = DateAdd( 'h', -arguments.timeZoneOffset, arguments.dateFrom );
        structInsert(params, "dateFrom", { value: arguments.dateFrom, cfsqltype: "cf_sql_timestamp" } );
    }

    if ( structKeyExists(arguments, 'dateTo') ) {
        sql &amp;= newLine &amp; "and timestamp &lt; :dateTo";
        //  adjust dateFrom to account for time zone difference between server and user
        var dateToUTC = DateAdd( 'h', -arguments.timeZoneOffset, arguments.dateTo );
        // we add a day to dateTo to arrive at an effectiveEndDateTime, namely midnight of the endDate
        // so that the endDate is inclusive, as users would very likely expect
        dateToUTC = dateAdd( 'd', 1, dateToUTC );
        // stdout.println( "dateToUTC : #dateToUTC #" );
        structInsert(params, "dateTo", { value: dateToUTC, cfsqltype: "cf_sql_timestamp" } );
    }

    sql &amp;= newLine &amp; "and a.attribute != 'version' ";

    sql &amp;= newLine &amp; "and a.attribute != 'lastEdited' ";

    sql &amp;= newLine &amp; "and a.attribute != 'userId' ";

    sql &amp;= newLine &amp; "order by a.timestamp desc, a.transaction";

    return queryExecute( sql, params );
}
</code></pre>

<p>Thanks to Igal Sapir for helping me work this out!</p>
]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[Debugging Technique CFML Development]]></title>
    <link href="http://dnando.github.io/blog/2015/06/16/debugging-technique-cfml-development/"/>
    <updated>2015-06-16T17:01:52+02:00</updated>
    <id>http://dnando.github.io/blog/2015/06/16/debugging-technique-cfml-development</id>
    <content type="html"><![CDATA[<p>I learned a debugging techique from Sean Corfield recently that I think is well worth sharing more widely. It works just as well for Lucee, Railo or Adobe Coldfusion. Here&rsquo;s what he reccommends:</p>

<p><blockquote><p>For ease of debugging any problems that may occur, I strongly recommend you always keep a Terminal / Console window open containing a tail of the console output from your CFML server. If you’re using Lucee or a Railo installation based on Tomcat, you’ll want to find the catalina.out log file and tail that. If you’re using ColdFusion 11, even tho’ it is notionally based on Tomcat, it’s completely non-standard and you’ll want to tail cfusion/logs/coldfusion-out.log.</p><footer><strong>Sean Corfield <a href="https://framework-one.github.io/documentation/3.5/cfml-and-clojure.html">https://framework-one.github.io/documentation/3.5/cfml-and-clojure.html</a></strong></footer></blockquote></p>

<p>To &ldquo;tail&rdquo;, in this case, means to show the newly added contents of a log file in real time. To get this to work, I open Terminal on my Mac and issue the following commands:</p>

<p> &hellip; for my local CF11 install:</p>

<pre><code class="`"> tail -f /Applications/ColdFusion11/cfusion/logs/coldfusion-out.log
</code></pre>

<p>  and for my local Lucee install:</p>

<pre><code class="``">  tail -f ~/tomcat/logs/catalina.out
</code></pre>

<p>  You will of course need to change those paths to match the directory under which your applications are installed.</p>

<p>  To get out of tail mode and back to the command line, hit CTRL-C.</p>

<p>  What I see when I do this is the last 10 lines of the log file, to start with. Anytime an additional line is added to the log file, it immediately appears in the console display in real time.</p>

<p>  Now what I can do in my code is send output to these log files. An example should explain it sufficiently. I just used this technique to debug a the following service function, where I wanted to ensure that dateTo UTC was being set as needed:</p>

<pre><code class="``">    public query function findRawAudit( string entity, numeric userId, date dateFrom, date dateTo, numeric timeZoneOffset ) {
        var stdout = createObject( "java", "java.lang.System" ).out;

        ...

        if ( structKeyExists(arguments, 'dateTo') ) {
            sql &amp;= "#newLine#" &amp; "and timestamp &lt; :dateTo";
            //  adjust dateFrom to account for time zone difference between server and user
            var dateToUTC = DateAdd( 'h', -arguments.timeZoneOffset, arguments.dateTo );
            // we add a day to dateTo to arrive at an effectiveEndDateTime, namely midnight of the endDate
            // so that the endDate is inclusive, as users would very likely expect
            dateToUTC = dateAdd( 'd', 1, dateToUTC );
            stdout.println( "dateToUTC : #dateToUTC #" );
            structInsert(params, "dateTo", { value: dateToUTC, cfsqltype: "cf_sql_timestamp" } );
        }
        ...
    }
</code></pre>

<p>Note the lines <code>var stdout = createObject( "java", "java.lang.System" ).out;</code> and <code>stdout.println( "dateToUTC : #dateToUTC #" );</code> which creates an instance of java.lang.System.out and prints a line to the log file.</p>

<p>Immediately upon running this code <code>dateToUTC : {ts '2015-06-16 22:00:00'}</code> appeared in my tail output, which is what I expected. The bug was elsewhere, . I find this very useful. It&rsquo;s simple and effective, and it works in the same way across ACF, Lucee and Railo. I don&rsquo;t have to fiddle around with an admin setting to turn on trace output, check if trace output is enabled, remember the syntax used for cftrace / trace, and I can use it directly on a production server in a pinch in case of need.</p>

<p>Of course, you can tail any log file necessary, or use WriteLog() if you prefer. WriteLog() does the exact same thing as stdout.println(), and it&rsquo;s easier to remember. So taking the above example, I could also use</p>

<pre><code>WriteLog( "dateToUTC : #dateToUTC #" );
</code></pre>

<p>or
<code>
WriteLog( "dateToUTC : "  &amp; dateToUTC );
</code></p>
]]></content>
  </entry>
  
</feed>
