<?xml version="1.0" encoding="utf-8"?>
<feed xmlns="http://www.w3.org/2005/Atom">

  <title><![CDATA[Category: Centos | Nando @ Aria Media]]></title>
  <link href="http://dnando.github.io/blog/categories/centos/atom.xml" rel="self"/>
  <link href="http://dnando.github.io/"/>
  <updated>2014-12-02T22:50:44+01:00</updated>
  <id>http://dnando.github.io/</id>
  <author>
    <name><![CDATA[Nando @ Aria Media]]></name>
    
  </author>
  <generator uri="http://octopress.org/">Octopress</generator>

  
  <entry>
    <title type="html"><![CDATA[Exploring CentOS 7 Firewalld]]></title>
    <link href="http://dnando.github.io/blog/2014/12/02/exploring-centos-7-firewalld/"/>
    <updated>2014-12-02T10:41:04+01:00</updated>
    <id>http://dnando.github.io/blog/2014/12/02/exploring-centos-7-firewalld</id>
    <content type="html"><![CDATA[<p>New with CentOS 7 is firewalld, a replacement for iptables to manage the firewall. As with anything new, at first glance it seems confusing, but I&rsquo;m finding I prefer it over iptables.</p>

<p>The first thing to understand about firewalld is that it is has multiple layers. It comes with a predefined set of zones, namely block, dmz, drop, external, home, internal, public, trusted, and work. Each of those zones can be associated with a network device or one or more ip addresses. Essentially, zones define and demarcate the level of trust an admin has decided to place on the devices and traffic within a network.</p>

<p>firewalld also pre-defines a set of services that can be added or removed from a zone. Effectively, when a service is added to a zone, it opens a port and sets any other necessary parameters. Services are defined with XML. Here&rsquo;s what the http service looks like:
<code>
&lt;?xml version="1.0" encoding="utf-8"?&gt;
&lt;service&gt;
  &lt;short&gt;WWW (HTTP)&lt;/short&gt;
  &lt;description&gt;HTTP is the protocol used to serve Web pages. If you plan to make your Web server publicly available, enable this option. ... &lt;/description&gt;
  &lt;port protocol="tcp" port="80"/&gt;
&lt;/service&gt;
</code>
So to open port 80 via the tcp protocol to server http requests, as an example, first a zone must be associated with the network device that will handle the traffic, and then the http service added to the zone. As an admin, you can define your own custom services, or customize existing services. Other techniques allow you to open a port directly on a zone, or define more complex rules for access.</p>

<p>To configure the firewall and check its status, a command line client is provided, firewall-cmd. It can be used to make both permanent and temporary config changes. The configuration for firewalld is stored in XML files in /usr/lib/firewalld/ ( the default settings, not to be modified! ) and /etc/firewalld/ ( for user configured settings, which have preference over those in the default location ). These files can be edited, backed up, or used as templates for other server installations.</p>

<p>Now that we have an overview, we can get to work. To check if firewalld is running:</p>

<pre><code>systemctl status firewalld
</code></pre>

<p>If you see from the output that firewalld is not running, or you see that the loaded service is disabled, here are the commands needed:</p>

<pre><code>systemctl enable firewalld
systemctl start firewalld
</code></pre>

<p>If a service is enabled, it will start on system reboot. Hence it&rsquo;s particularly important to ensure firewalld is enabled on a production server.</p>

<p>Here&rsquo;s how to disable firewalld so it will not start at boot time, and shut it down:</p>

<pre><code>systemctl disable firewalld
systemctl stop firewalld
</code></pre>

<p>Now I want to configure the firewall. First, I check for the name of the ethernet interface so that I can refer to it to associate it with a zone:</p>

<pre><code>nmcli dev status
</code></pre>

<p>Then I check which zone eno16777736 is currently assigned to:</p>

<pre><code>firewall-cmd --get-zone-of-interface=eno16777736
</code></pre>

<p>The result is &ldquo;no zone&rdquo;, so the next step is to add the ethernet interface to the public zone, which is the zone I&rsquo;ve decided to use for http access to the server. It&rsquo;s important to add the &ndash;permanent flag to the command so it is retained permanently, across reboots:</p>

<pre><code>firewall-cmd --zone=public --add-interface=eno16777736 --permanent
</code></pre>

<p>Now I have to reload the firewall configuration for the changes to take effect:</p>

<pre><code>firewall-cmd --reload
</code></pre>

<p>And then we can double check just to make sure the ethernet interface is now added to the public zone &hellip;</p>

<pre><code>firewall-cmd --get-zone-of-interface=eno16777736
</code></pre>

<p>and the result is &ldquo;public&rdquo;, so that&rsquo;s now set up correctly.</p>

<p>Let&rsquo;s now check how the public zone is currently set up:</p>

<pre><code>firewall-cmd --zone=public --list-all
</code></pre>

<p>Here we see again that the ethernet interface is added to the public zone, and that it is both active and the default zone. By default after installing CentOS 7, we have the services dhcpv6-client and ssh added to this zone. Taking a quick look at the description for this service to see what it does by opening /usr/lib/firewalld/services/dhcpv6-client.xml, we see, &ldquo;This option allows a DHCP for IPv6 (DHCPv6) client to obtain addresses and other IPv6 settings from DHCPv6 server.&rdquo; We won&rsquo;t be using IPv6 addresses within our local network to access this machine, so I think it&rsquo;s safe to remove this service, although we may want to leave it in place on a production server:</p>

<pre><code>firewall-cmd --zone=public --remove-service=dhcpv6-client --permanent
</code></pre>

<p><strong>Reminder - remember to always add the permanent flag to these commands if you want changes to be persisted!</strong></p>

<p>Now we can add the services for http access to our public zone:</p>

<pre><code>firewall-cmd --zone=public --add-service=http --permanent
firewall-cmd --zone=public --add-service=https --permanent
</code></pre>

<p>&hellip; reload the firewall &hellip;</p>

<pre><code>firewall-cmd --reload
</code></pre>

<p>&hellip; and recheck the configuration, using list-services instead of list-all just to try it out:</p>

<pre><code>firewall-cmd --zone=public --list-services
</code></pre>

<p>and I see that we now have services http https ssh configured. Excellent. Let&rsquo;s test that in a web browser.</p>

<p>I&rsquo;ve installed nginx web server, but see using systemctl status nginx that it&rsquo;s not yet running or enabled, so first we run</p>

<pre><code>systemctl start nginx
systemctl enable nginx
</code></pre>

<p>And then I go to 192.168.1.16 in a web browser and see <strong>Welcome to nginx!</strong> Good.</p>

<p>As a double check, let&rsquo;s remove the http service and see what happens.</p>

<pre><code>firewall-cmd --zone=public --remove-service=http --permanent
firewall-cmd --reload
</code></pre>

<p>Reloading 192.168.1.16, I get a No data received message, so that&rsquo;s exactly what we should expect.</p>

<pre><code>firewall-cmd --zone=public --add-service=http --permanent
firewall-cmd --reload
</code></pre>

<p>And adding the http service back to the public zone again allows the <strong>Welcome to nginx!</strong> page to be loaded in my browser. Perfect.</p>

<p>However, I still don&rsquo;t have access to the CF Admin panel at <a href="http://192.168.1.16:8500/CFIDE/administrator/index.cfm,">http://192.168.1.16:8500/CFIDE/administrator/index.cfm,</a> because that&rsquo;s over port 8500. On a production machine, I absolutely would not open port 8500 for this purpose. But since this server is on our local office network, let&rsquo;s see how we can do this.</p>

<p>The first option that comes to mind is to create a custom firewalld service specifically for this purpose. Documentation I&rsquo;ve read recommends using existing services as a template. Custom services go in /etc/firewalld/services/. First let&rsquo;s make a copy of the http service, calling it http8500, and place it in /etc/firewalld/services/:</p>

<pre><code>cp /usr/lib/firewalld/services/http.xml /etc/firewalld/services/http8500.xml
</code></pre>

<p>Then we edit /etc/firewalld/services/http8500.xml to use port 8500 instead of port 80. Here&rsquo;s what the modified file looks like:</p>

<pre><code>&lt;?xml version="1.0" encoding="utf-8"?&gt;
&lt;service&gt;
  &lt;short&gt;CF Admin Access&lt;/short&gt;
  &lt;description&gt;For CF Admin access via port 8500.&lt;/description&gt;
  &lt;port protocol="tcp" port="8500"/&gt;
&lt;/service&gt;
</code></pre>

<p>Then we add this service to the public zone and reload the firewall:</p>

<pre><code>firewall-cmd --zone=public --add-service=http8500 --permanent
firewall-cmd --reload
</code></pre>

<p>And now <a href="http://192.168.1.16:8500/CFIDE/administrator/index.cfm">http://192.168.1.16:8500/CFIDE/administrator/index.cfm</a> works! Again, this is not how I&rsquo;d set up access to the CF administrator on a production machine, but it was an opportunity to experiment with creating custom services. What I like about this option is that I can enable or disable it, independently of the other services enabled. So if I decide I want to lock this server down, I can quickly remove the http8500 service and access the CF Administrator via <a href="http://dnando.github.io/blog/2014/11/04/ssh-tunneling-coldfusion-lockdown-technique/">SSH Tunnelling</a>.</p>

<p>What I usually do is move ssh access to an obscure port. I think we can easily accomplish this using a custom service, but before I do that, I want to take a look at how the localhost interface is set up within the firewall. Again, we use nmcli dev status to get the name of the localhost or loopback interface</p>

<pre><code>nmcli dev status
</code></pre>

<p>It&rsquo;s &ldquo;lo&rdquo;, so let&rsquo;s see if it&rsquo;s set to zone by default:</p>

<pre><code>firewall-cmd --get-zone-of-interface=lo
</code></pre>

<p>Nope, the result I get is &ldquo;no zone&rdquo;. Let&rsquo;s also see if there are any services added to the trusted zone, which would be the most appropriate for localhost</p>

<pre><code>firewall-cmd --zone=trusted --list-all
</code></pre>

<p>At this point, nothing is added to this zone, no interfaces, services, sources or ports, etc. And the network interface &ldquo;lo&rdquo; isn&rsquo;t associated with any zone.</p>

<p>Now what I want to see is how the server responds to localhost access with the firewall enabled. This <em>might</em> be important on a production server because I will use ssh tunneling to access any areas I will restrict from public access. So let&rsquo;s logout from the server and login again with the -D flag so that I can tunnel into the test server and test if I have access via localhost with the firewall setup as it is now:</p>

<pre><code>exit
ssh -D 6100 root@192.168.1.16
root@192.168.1.16's password:
</code></pre>

<p>I keep Firefox on my dev machine reserved and set up for ssh tunneling on port 6100, so I simply open Firefox and browse to <a href="http://localhost:8500/CFIDE/administrator/index.cfm,">http://localhost:8500/CFIDE/administrator/index.cfm,</a> and find I can access the CF11 admin page and login. Browsing to <a href="http://localhost/,">http://localhost/,</a> I see the Welcome to nginx! page. So at this point via localhost, I have access. ( Note for anyone without experience using ssh tunnelling,  when I use localhost on Firefox set up for ssh tunneling, logged to the CentOS server using the -D flag, I am browsing the CentOS server next to me, not my dev machine. See <a href="http://dnando.github.io/blog/2014/11/04/ssh-tunneling-coldfusion-lockdown-technique/">SSH Tunnelling</a> for details how to do this. )</p>

<p>Now what happens if I add the &ldquo;lo&rdquo; network interface to the trusted zone, where no access is currently set up?</p>

<pre><code>firewall-cmd --zone=trusted --add-interface=lo --permanent
firewall-cmd --reload
</code></pre>

<p>Adding the lo interface to the trusted zone with no services had no affect at all on tunnelled access to localhost. So it looks like the firewall doesn&rsquo;t interfere there. So to clean up, I will remove the lo interface from the trusted zone and call it a day.</p>

<pre><code>firewall-cmd --zone=trusted --remove-interface=lo --permanent
firewall-cmd --reload
</code></pre>

<p>PS - for some reason, perhaps it is a bug, lo was not removed from the trusted zone according to firewall-cmd &ndash;zone=trusted &ndash;list-all unless and until I rebooted the server. The strange thing was that the config file was correctly altered, but somehow, firewalld didn&rsquo;t seem to pick up the change. I&rsquo;ll look into filing a bug report later this evening &hellip;</p>

<p>References:<br>
1 <a href="https://access.redhat.com/documentation/en-US/Red_Hat_Enterprise_Linux/7/html/Security_Guide/sec-Using_Firewalls.html">https://access.redhat.com/documentation/en-US/Red_Hat_Enterprise_Linux/7/html/Security_Guide/sec-Using_Firewalls.html</a><br>
2 <a href="http://www.certdepot.net/rhel7-get-started-firewalld/">http://www.certdepot.net/rhel7-get-started-firewalld/</a><br>
3 <a href="http://fedoraproject.org/wiki/FirewallD">http://fedoraproject.org/wiki/FirewallD</a></p>
]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[Setting Up a Local Testing Server on VMWare]]></title>
    <link href="http://dnando.github.io/blog/2014/12/01/setting-up-a-local-testing-server-on-vmware/"/>
    <updated>2014-12-01T15:55:49+01:00</updated>
    <id>http://dnando.github.io/blog/2014/12/01/setting-up-a-local-testing-server-on-vmware</id>
    <content type="html"><![CDATA[<p>I&rsquo;ve been thinking about how to best set up a local testing environment for some time. My production servers are all on CentOS. On the advice of another developer I met at CFCamp this year, I&rsquo;ve decided to use VMWare to set up a CentOS server on a virtual machine here in the office.</p>

<p>For ease of access, what I needed to set up was a static ip for each VM I need. It&rsquo;s not hard to do once you figure it out, but getting all the pieces in place took some hours of digging, trial and error. This post, while specific to VMWare and CentOS 7, is intended to help both my future self and anyone else set up networking quickly and easily.  You may need to adapt as necessary for your specific environment.</p>

<p>The obvious first step was to download the ISO image from a <a href="http://www.centos.org/download/mirrors/">CentOS mirror site</a>. I grabbed the minimal install as a nearest approximation to the production environment, and created a VM from it using VMWare on an unused Mac mini we had laying around the office.</p>

<p>On the minimal install, networking isn&rsquo;t enabled by default. So before I could proceed, I had to figure how to enable networking, and get it working via a static IP. Here&rsquo;s a summary of what finally worked for me.</p>

<p>1) Figure out what the ethernet device is named by running the command :</p>

<pre><code>nmcli dev status
</code></pre>

<p><img src="/images/nmcli.gif" alt="nmcli dev status" /></p>

<p>As you can see, mine was named eno16777736</p>

<p>2) cd to the directory /etc/sysconfig/network-scripts and run ls to display its files</p>

<pre><code>cd /etc/sysconfig/network-scripts
ls
</code></pre>

<p><img src="/images/networkScriptsLs.gif" alt="network-scripts ls" /></p>

<p>3) Look for the configuration file for your ethernet device, mine was named ifcfg-eno16777736 and open it for editing using vm or nano</p>

<pre><code>nano ifcfg-eno16777736
</code></pre>

<p><img src="/images/nano-ifcfg.gif" alt="network-scripts ls" /></p>

<p>The above screenshot was taken after it was edited. The lines to change or add are:
<code>
BOOTPROTO=static
IPADDR=&lt;the static ip address you want to assign to this instance&gt;
NETMASK=255.255.255.0
GATEWAY=&lt;the gateway ip address of your internal network&gt;
NM_CONTROLLED=no
ONBOOT=yes
</code>
I found that adding the correct gateway ip was essential. NM_CONTROLLED specifies whether or not this device is controlled by the Network Manager. We are setting the parameters manually here, so this must be no. ONBOOT=yes specifies to connect this network device on boot.</p>

<p>Save the file, exit nano, and run the following command to restart the network:</p>

<pre><code>systemctl restart network
</code></pre>

<p>Now CentOS 7 should be setup to network via the static local ip of your choice. But the connection isn&rsquo;t bridged outside of the VM. After some fiddling around, here&rsquo;s what worked for me. I went out to the VMWare interface, clicked on the double arrow icon to open the networking menu, and clicked Network Adapter Settings&hellip;</p>

<p><img src="/images/vmWareNAS1.jpg" alt="VMWare Network menu" /></p>

<p>From the menu, I chose Autodetect, as shown below:</p>

<p><img src="/images/vmWareNAS2.jpg" alt="VMWare Network menu" /></p>

<p>Once I had these configuration changes in place, I could access the CentOS instance via SSH and SFTP from my dev machine.</p>

<p>By the way, it also seems possible to use the Network Manager to achieve the same end. In this case, you&rsquo;d leave the config file for your network device alone, and instead run the nmtui command. Search Google for more complete instructions. You&rsquo;ll still need to bridge the connection through VMWare tho&#8217;.</p>

<p>Hope this helps somebody &hellip;</p>

<p>PS - If you can access the instance via SSH or SFTP, but cannot from a browser, you may need to either disable and stop firewalld:</p>

<pre><code>systemctl disable firewalld
systemctl stop firewalld
</code></pre>

<p>or better, figure out how to configure it properly to allow access via a browser.</p>
]]></content>
  </entry>
  
</feed>
